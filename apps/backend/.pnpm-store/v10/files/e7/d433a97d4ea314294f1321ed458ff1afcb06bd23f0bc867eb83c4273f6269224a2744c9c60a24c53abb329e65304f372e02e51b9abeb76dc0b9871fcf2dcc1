{"version":3,"file":"cleanData.js","sources":["../../../../../admin/src/components/DataManager/utils/cleanData.ts"],"sourcesContent":["import camelCase from 'lodash/camelCase';\nimport omit from 'lodash/omit';\nimport sortBy from 'lodash/sortBy';\n\nimport { pluginId } from '../../../pluginId';\n\nimport type {\n  Component,\n  Components,\n  ContentTypes,\n  ContentType,\n  AnyAttribute,\n} from '../../../types';\nimport type { UID } from '@strapi/types';\n\nconst sortContentType = (types: ContentTypes) => {\n  return sortBy(\n    Object.keys(types)\n      .map((uid) => ({\n        visible: types[uid].visible,\n        name: uid as UID.ContentType,\n        title: types[uid].info.displayName,\n        plugin: types[uid].plugin,\n        uid: uid as UID.ContentType,\n        to: `/plugins/${pluginId}/content-types/${uid}`,\n        kind: types[uid].kind,\n        restrictRelationsTo: types[uid].restrictRelationsTo,\n        status: types[uid].status,\n      }))\n      .filter((obj) => obj !== null),\n    (obj) => camelCase(obj.title)\n  );\n};\n\ntype TrackingEventProperties = {\n  newContentTypes: number;\n  editedContentTypes: number;\n  deletedContentTypes: number;\n  newComponents: number;\n  editedComponents: number;\n  deletedComponents: number;\n  newFields: number;\n  editedFields: number;\n  deletedFields: number;\n};\n\nconst stateToRequestData = ({\n  components,\n  contentTypes,\n}: {\n  components: Components;\n  contentTypes: ContentTypes;\n}) => {\n  const trackingEventProperties: TrackingEventProperties = {\n    newContentTypes: 0,\n    editedContentTypes: 0,\n    deletedContentTypes: 0,\n    newComponents: 0,\n    editedComponents: 0,\n    deletedComponents: 0,\n    newFields: 0,\n    editedFields: 0,\n    deletedFields: 0,\n  };\n\n  const formattedComponents = Object.values(components)\n    .filter((compo) => {\n      return ['NEW', 'CHANGED', 'REMOVED'].includes(compo.status);\n    })\n    .map((component) => {\n      const requestFormattedComponent = formatTypeForRequest(component);\n\n      const eventAction = requestFormattedComponent.action as 'create' | 'update' | 'delete';\n      updateEventCounts(\n        { ...component, action: eventAction },\n        trackingEventProperties,\n        'component'\n      );\n\n      return requestFormattedComponent;\n    });\n\n  const formattedContentTypes = Object.values(contentTypes)\n    .filter((contentType) => {\n      return ['NEW', 'CHANGED', 'REMOVED'].includes(contentType.status);\n    })\n    .map((contentType) => {\n      const requestFormattedContentType = formatTypeForRequest(contentType);\n\n      const eventAction = requestFormattedContentType.action as 'create' | 'update' | 'delete';\n      updateEventCounts(\n        { ...contentType, action: eventAction },\n        trackingEventProperties,\n        'contentType'\n      );\n\n      return requestFormattedContentType;\n    });\n\n  return {\n    requestData: {\n      components: formattedComponents,\n      contentTypes: formattedContentTypes,\n    },\n    trackingEventProperties,\n  };\n};\n\nconst removeNullKeys = (obj: Record<string, unknown>) => {\n  return Object.fromEntries(\n    Object.entries(obj).filter(([_, value]) => {\n      if (Array.isArray(value)) {\n        return value.length > 0;\n      }\n      if (typeof value === 'object' && value !== null) {\n        return Object.keys(value).length > 0;\n      }\n      return value !== null && value !== undefined;\n    })\n  );\n};\n\nconst formatAttribute = (attr: AnyAttribute) => {\n  if ('customField' in attr) {\n    return { ...attr, type: 'customField' };\n  }\n\n  if ('targetAttribute' in attr) {\n    return { ...attr, targetAttribute: attr.targetAttribute === '-' ? null : attr.targetAttribute };\n  }\n\n  return attr;\n};\n\nconst formatTypeForRequest = (type: ContentType | Component) => {\n  let action;\n  // should we do a diff with the initial data instead of trusting the state status ??\n  switch (type.status) {\n    case 'NEW':\n      action = 'create';\n      break;\n    case 'CHANGED':\n      action = 'update';\n      break;\n    case 'REMOVED':\n      return { action: 'delete', uid: type.uid };\n    default:\n      throw new Error('Invalid status');\n  }\n\n  return {\n    action,\n    uid: type.uid,\n    category: 'category' in type ? type.category : undefined,\n    ...omit(type, ['info', 'options', 'visible', 'uid', 'restrictRelationsTo']),\n    ...type.options,\n    ...type.info,\n    attributes: type.attributes.map((attr) => {\n      let action;\n\n      switch (attr.status) {\n        // NOTE: we want to always send the full data to preserve the order\n\n        case 'NEW':\n          action = 'create';\n          break;\n        case 'REMOVED':\n          return { action: 'delete', name: attr.name };\n        case 'UNCHANGED':\n        case 'CHANGED':\n        default:\n          action = 'update';\n      }\n\n      return {\n        action,\n        name: attr.name,\n        properties: removeNullKeys(omit(formatAttribute(attr), ['status', 'name'])),\n      };\n    }),\n  };\n};\n\nconst updateEventCounts = (\n  type: (ContentType | Component) & { action?: 'create' | 'update' | 'delete' },\n  counts: TrackingEventProperties,\n  entityType: 'component' | 'contentType'\n) => {\n  if (!type || typeof type.action !== 'string') {\n    return;\n  }\n\n  const isContentType = entityType === 'contentType';\n\n  switch (type.action) {\n    case 'create':\n      if (isContentType) {\n        counts.newContentTypes++;\n      } else {\n        counts.newComponents++;\n      }\n      break;\n    case 'update':\n      if (isContentType) {\n        counts.editedContentTypes++;\n      } else {\n        counts.editedComponents++;\n      }\n      break;\n    case 'delete':\n      if (isContentType) {\n        counts.deletedContentTypes++;\n      } else {\n        counts.deletedComponents++;\n      }\n      break;\n    default:\n      break;\n  }\n\n  if (Array.isArray(type.attributes)) {\n    if (type.action === 'delete') {\n      counts.deletedFields += type.attributes.length;\n    } else {\n      type.attributes.forEach((attribute) => {\n        if (!attribute || typeof attribute.status !== 'string') {\n          return;\n        }\n\n        switch (attribute.status) {\n          case 'NEW':\n            counts.newFields++;\n            break;\n          case 'CHANGED':\n            counts.editedFields++;\n            break;\n          case 'REMOVED':\n            counts.deletedFields++;\n            break;\n          case 'UNCHANGED':\n          default:\n            break;\n        }\n      });\n    }\n  }\n};\n\nexport { stateToRequestData, sortContentType };\n"],"names":["sortContentType","types","sortBy","Object","keys","map","uid","visible","name","title","info","displayName","plugin","to","pluginId","kind","restrictRelationsTo","status","filter","obj","camelCase","stateToRequestData","components","contentTypes","trackingEventProperties","newContentTypes","editedContentTypes","deletedContentTypes","newComponents","editedComponents","deletedComponents","newFields","editedFields","deletedFields","formattedComponents","values","compo","includes","component","requestFormattedComponent","formatTypeForRequest","eventAction","action","updateEventCounts","formattedContentTypes","contentType","requestFormattedContentType","requestData","removeNullKeys","fromEntries","entries","_","value","Array","isArray","length","undefined","formatAttribute","attr","type","targetAttribute","Error","category","omit","options","attributes","properties","counts","entityType","isContentType","forEach","attribute"],"mappings":"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"}